<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>bottle1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///randomize trash appearance
depth = random_range(-100, 100);
//sprite_index = choose(bottle1, bottle2, plastic_bag1, straw1, straw2, 
//                plastic_lid, bottle_cap1, bottle_cap2, styrofoam_1, styrofoam_2);

if sprite_index == bottle1 {
    image_xscale = 40 / sprite_get_width(sprite_index);
    image_yscale = 57 / sprite_get_height(sprite_index); 
} else if sprite_index == bottle2 {
    image_xscale = 20 / sprite_get_width(sprite_index);
    image_yscale = 43 / sprite_get_height(sprite_index); 
} else if sprite_index == plastic_bag1 {
    image_xscale = 50 / sprite_get_width(sprite_index);
    image_yscale = 56 / sprite_get_height(sprite_index); 
} else if sprite_index == straw1 {
    image_xscale = 30 / sprite_get_width(sprite_index);
    image_yscale = 30 / sprite_get_height(sprite_index); 
} else if sprite_index == straw2 {
    image_xscale = 50 / sprite_get_width(sprite_index);
    image_yscale = 50 / sprite_get_height(sprite_index); 
} else if sprite_index == plastic_lid {
    image_xscale = 25 / sprite_get_width(sprite_index);
    image_yscale = 8 / sprite_get_height(sprite_index); 
}  else if sprite_index == bottle_cap1 {
    image_xscale = 10 / sprite_get_width(sprite_index);
    image_yscale = 11 / sprite_get_height(sprite_index); 
}  else if sprite_index == bottle_cap2 {
    image_xscale = 10 / sprite_get_width(sprite_index);
    image_yscale = 10 / sprite_get_height(sprite_index); 
}  else if sprite_index == styrofoam_1 {
    image_xscale = 30 / sprite_get_width(sprite_index);
    image_yscale = 21 / sprite_get_height(sprite_index); 
}  else if sprite_index == styrofoam_2 {
    image_xscale = 40 / sprite_get_width(sprite_index);
    image_yscale = 40 / sprite_get_height(sprite_index); 
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///destroy if we reached end of screen

if (x&lt;=-50) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player collision behavior
if place_meeting(x, y, player) {
    if (global.weight &lt; 9) {
        for (i=0; i&lt;global.trash_list_length; i++) {
            if (global.trash_list[i, 0] == sprite_index) {
                global.trash_list[i, 2] += 1;
                break;
            }
        }
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
